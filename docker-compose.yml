x-airflow-common:
  &airflow-common
  image: airflow-custom:v1.1
  # image: apache/airflow:2.6.1
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__WEBSERVER__RELOAD_ON_PLUGIN_CHANGE: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./services/airflow/dags:/opt/airflow/dags
    - ./services/airflow/logs:/opt/airflow/logs
    - ./services/airflow/config:/opt/airflow/config
    - ./services/airflow/plugins:/opt/airflow/plugins
    - ./services/airflow/config/airflow.cfg:/opt/airflow/airflow.cfg
  user: "0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  #   ===== HDFS: namenode =====
  namenode:
    image: kadensungbincho/ranger-hadoop-namenode:2.0.0-hadoop3.2.1-java8-ranger2.1.0
    container_name: namenode
    hostname: namenode
    environment:
      CLUSTER_NAME: datn_2025
      HADOOP_CONF_DIR: /etc/hadoop
    ports:
      - "9870:9870"
      - "8020:8020"
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [ ! -f "/opt/data/namenode/current/VERSION" ]; then
          echo "Formatting NameNode..."
          hdfs namenode -format -force
        fi
        echo "Installing Ranger HDFS Plugin..."
        cd /opt/ranger-hdfs-plugin
        ./enable-hdfs-plugin.sh
        echo "Starting NameNode..."
        hdfs namenode
    volumes:
      - ./services/hadoop/conf/core-site.xml:/etc/hadoop/core-site.xml
      - ./services/hadoop/conf/hdfs-site.xml:/etc/hadoop/hdfs-site.xml
      - ./services/hadoop/conf/yarn-site.xml:/etc/hadoop/yarn-site.xml
      - ./services/hadoop/conf/install.properties:/opt/ranger-hdfs-plugin/install.properties
      - ./services/hadoop/data/namenode:/opt/data/namenode
    networks:
      - mini_lakehouse
  
  #   ===== HDFS: datanode =====
  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    mem_limit: 500m
    hostname: datanode1
    environment:
      HADOOP_CONF_DIR: /etc/hadoop
    volumes:
      - ./services/hadoop/conf/core-site.xml:/etc/hadoop/core-site.xml
      - ./services/hadoop/conf/hdfs-site.xml:/etc/hadoop/hdfs-site.xml
      - ./services/hadoop/conf/yarn-site.xml:/etc/hadoop/yarn-site.xml
      - ./services/hadoop/conf/install.properties:/opt/ranger-hdfs-plugin/install.properties
      - ./services/hadoop/data/datanode1:/opt/data/datanode
    networks:
      - mini_lakehouse
  
  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    mem_limit: 500m
    hostname: datanode2
    environment:
      HADOOP_CONF_DIR: /etc/hadoop
    volumes:
      - ./services/hadoop/conf/core-site.xml:/etc/hadoop/core-site.xml
      - ./services/hadoop/conf/hdfs-site.xml:/etc/hadoop/hdfs-site.xml
      - ./services/hadoop/conf/yarn-site.xml:/etc/hadoop/yarn-site.xml
      - ./services/hadoop/conf/install.properties:/opt/ranger-hdfs-plugin/install.properties
      - ./services/hadoop/data/datanode2:/opt/data/datanode
    networks:
      - mini_lakehouse
  
  # YARN: 
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    mem_limit: 1000m

    hostname: resourcemanager
    environment:
      HADOOP_CONF_DIR: /etc/hadoop
    volumes:
      - ./services/hadoop/conf/core-site.xml:/etc/hadoop/core-site.xml
      - ./services/hadoop/conf/hdfs-site.xml:/etc/hadoop/hdfs-site.xml
      - ./services/hadoop/conf/yarn-site.xml:/etc/hadoop/yarn-site.xml
    ports:
      - "8088:8088"
      - "8032:8032"
    networks:
      - mini_lakehouse

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager1
    mem_limit: 3000m
    hostname: nodemanager1
    environment:
      HADOOP_CONF_DIR: /etc/hadoop
    ports:
      - "8043:8042"
    volumes:
      - ./services/hadoop/conf/core-site.xml:/etc/hadoop/core-site.xml
      - ./services/hadoop/conf/hdfs-site.xml:/etc/hadoop/hdfs-site.xml
      - ./services/hadoop/conf/yarn-site.xml:/etc/hadoop/yarn-site.xml
    networks:
      - mini_lakehouse

  nodemanager2:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager2
    mem_limit: 3000m
    hostname: nodemanager2
    environment:
      HADOOP_CONF_DIR: /etc/hadoop
    ports:
      - "8044:8042"
    volumes:
      - ./services/hadoop/conf/core-site.xml:/etc/hadoop/core-site.xml
      - ./services/hadoop/conf/hdfs-site.xml:/etc/hadoop/hdfs-site.xml
      - ./services/hadoop/conf/yarn-site.xml:/etc/hadoop/yarn-site.xml
    networks:
      - mini_lakehouse


  spark-thrift-server:
    # image: apache/spark:3.3.3-python3
    image: spark-custom:v2.0
    container_name: spark-thrift-server
    mem_limit: 900m

    entrypoint: ["/bin/bash", "-c", "
      echo 'Enabling Ranger Hive Plugin...';
      sudo /run.sh;
      echo 'Starting Spark Thrift Server...';
      /opt/spark/bin/spark-submit
      --class org.apache.spark.sql.hive.thriftserver.HiveThriftServer2
      --master yarn
      --deploy-mode client
      --proxy-user spark_user
      --conf spark.hadoop.yarn.resourcemanager.hostname=resourcemanager
      --conf spark.sql.extensions=org.apache.kyuubi.plugin.spark.authz.ranger.RangerSparkExtension
      --conf spark.sql.authorization.enabled=true
      --conf spark.hadoop.hive.security.authorization.manager=org.apache.ranger.authorization.hive.authorizer.RangerHiveAuthorizerFactory
      --conf spark.hadoop.ranger.plugin.hive.service.name=hive
      --conf spark.hadoop.ranger.plugin.hive.policy.rest.url=http://ranger-admin:6080
      --conf spark.hadoop.ranger.plugin.hive.policy.rest.username=admin
      --conf spark.hadoop.ranger.plugin.hive.policy.rest.password=rangeradmin1
    "]
    environment:
      - SPARK_MASTER=yarn
      - SPARK_YARN_MODE=true
      - SPARK_YARN_JAR=hdfs://namenode:8020/spark/jars
      - HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop
      - YARN_CONF_DIR=/opt/hadoop/etc/hadoop
      - HADOOP_USER_NAME=spark_user
      - SPARK_USER=spark_user
      - RANGER_PLUGIN_HOME=/opt/ranger-hive-plugin
    volumes:
      - ./services/spark/conf/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
      - ./services/spark/conf/ranger-spark-security.xml:/opt/spark/conf/ranger-spark-security.xml
      - ./services/spark/conf/ranger-spark-audit.xml:/opt/spark/conf/ranger-spark-audit.xml
      - ./services/hive/conf/hive-site.xml:/opt/spark/conf/hive-site.xml
      - ./services/hadoop/conf/core-site.xml:/opt/hadoop/etc/hadoop/conf/core-site.xml
      - ./services/hadoop/conf/hdfs-site.xml:/opt/hadoop/etc/hadoop/conf/hdfs-site.xml
      - ./services/hadoop/conf/yarn-site.xml:/opt/hadoop/etc/hadoop/conf/hdfs-site.xml
      - ./services/spark/jars/mysql-connector-java-8.0.21.jar:/opt/spark/jars/mysql-connector-java-8.0.21.jar
      - ./services/spark/jars/iceberg-spark-runtime-3.3_2.12-1.3.0.jar:/opt/spark/jars/iceberg-spark-runtime-3.3_2.12-1.3.0.jar
      - ./services/spark/jars/kyuubi-spark-authz_2.12-1.10.0.jar:/opt/spark/jars/kyuubi-spark-authz_2.12-1.10.0.jar
      - ./services/spark/jars/kyuubi-spark-authz-shaded_2.12-1.10.0.jar:/opt/spark/jars/kyuubi-spark-authz-shaded_2.12-1.10.0.jar
      - ./services/spark/conf/install.properties:/opt/ranger-hive-plugin/install.properties
    ports:
      - "10000:10000"
      - "4040:4040"
    networks:
      - mini_lakehouse
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "10000" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # hive-metastore
  hive-metastore:
    image: kadensungbincho/ranger-hive:2.0.0-hadoop3.2.1-java8-ranger2.1.0
    container_name: hive-metastore
    mem_limit: 500m
    environment:
      - HIVE_CONF_DIR=/opt/hive/conf
    volumes:
      - ./services/hive/conf/hive-site.xml:/opt/hive/conf/hive-site.xml
      - ./services/hive/conf/install.properties:/opt/ranger-hive-plugin/install.properties
      - ./services/hive/jars/mysql-connector-java-8.0.21.jar:/opt/hive/lib/mysql-connector-java-8.0.21.jar
      - ./services/hive/jars/iceberg-hive-runtime-1.3.0.jar:/opt/hive/lib/iceberg-hive-runtime-1.3.0.jar
    entrypoint: ["/bin/bash", "-c", "
      echo 'Waiting for MySQL to be ready...';
      while ! nc -z mysql 3306; do
        sleep 2;
      done;
      echo 'MySQL is ready. Checking schema...';
      if ! /opt/hive/bin/schematool -dbType mysql -info &> /dev/null; then
        echo 'Initializing Hive metastore schema...';
        /opt/hive/bin/schematool -dbType mysql -initSchema -verbose;
        echo 'Schema initialization completed.';
      else
        echo 'Schema already exists. Skipping initialization.';
      fi;
      echo 'Installing Ranger Hive Plugin...';
      cd /opt/ranger-hive-plugin;
      ./enable-hive-plugin.sh;
      echo 'Starting Hive metastore...';
      /opt/hive/bin/hive --service metastore
    "]
    ports:
      - "9083:9083"
    networks:
      - mini_lakehouse
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9083"]
      interval: 30s
      timeout: 10s
      retries: 3
      

  # mysql - serves both Hive Metastore and Ranger
  mysql:
    image: mysql:5.7
    hostname: mysql
    container_name: mysql
    mem_limit: 500m
    command: --default-authentication-plugin=mysql_native_password
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=hive_metastore
      - MYSQL_USER=hive
      - MYSQL_PASSWORD=hive
    ports:
      - "3306:3306"
    volumes:
      - ./services/mysql/data:/var/lib/mysql
    networks:
      - mini_lakehouse
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "--password=root"]
      interval: 30s
      timeout: 10s
      retries: 3

  # superset
  superset:
    image: superset_custom:v1.1
    container_name: superset
    mem_limit: 500m
    hostname: superset
    # environment:
    volumes:
      - ./services/superset/conf/superset_config.py:/app/pythonpath/superset_config.py
      - ./services/superset/data:/app/superset_home
    ports:
      - "8099:8088"
    networks:
      - mini_lakehouse
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8088/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    container_name: ranger-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: ranger
      MYSQL_USER: ranger
      MYSQL_PASSWORD: ranger
    expose:
      - "3306"
    networks:
      - mini_lakehouse

  ranger-admin:
    image: kadensungbincho/ranger-admin:2.1.0
    container_name: ranger-admin
    hostname: ranger
    depends_on:
      - db
    volumes:
      - ./services/ranger/admin/bootstrap.sh:/opt/ranger_admin/bootstrap.sh
      - ./services/ranger/admin/install.properties:/opt/ranger_admin/install.properties
    command: ["./bootstrap.sh"]
    ports:
      - "6080:6080"
    networks:
      - mini_lakehouse
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6080"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
  ranger-usersync:
    image: kadensungbincho/ranger-usersync:2.1.0
    container_name: ranger-usersync
    hostname: usersync
    depends_on:
      - ranger-admin
    volumes:
      - ./services/ranger/usersync/bootstrap.sh:/opt/ranger_usersync/bootstrap.sh
      - ./services/ranger/usersync/install.properties:/opt/ranger_usersync/install.properties
    command: ["./bootstrap.sh"]
    networks:
      - mini_lakehouse
    restart: always
  #  ranger-usersync-ldap:
  #    image: kadensungbincho/ranger-usersync:2.1.0
  #    container_name: ranger2.0.0-usersync-ldap
  #    hostname: usersync-ldap
  #    depends_on:
  #      - ranger-admin
  #    volumes:
  #      - ./usersync/bootstrap-ldap.sh:/opt/ranger_usersync/bootstrap.sh
  #      - ./usersync/install-ldap.properties:/opt/ranger_usersync/install-hdfs.properties
  #      - ./usersync/templates:/templates
  #      - ./usersync/conf.dist/log4j.properties:/opt/ranger_usersync/conf.dist/log4j.properties
  #    command: ["./bootstrap.sh"]
  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: ranger-es
    mem_limit: 1000m
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "ELASTIC_PASSWORD=elasticsearch"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - mini_lakehouse


  # this is for airflow cluster
  postgres:
    image: postgres:13
    hostname: postgres
    container_name: postgres
    mem_limit: 250m
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./services/postgres/data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 10s
      retries: 5
      start_period: 5s
    networks:
      - mini_lakehouse


  airflow-webserver:
    <<: *airflow-common
    mem_limit: 1000m
    command: webserver
    container_name: airflow-webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - mini_lakehouse

  airflow-scheduler:
    <<: *airflow-common
    mem_limit: 1000m
    command: scheduler
    container_name: airflow-scheduler
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8974/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - mini_lakehouse

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!! Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!! Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!! Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!! You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ./services/airflow:/sources
    networks:
      - mini_lakehouse

volumes:
  db_data:
    driver: local
  es_data:
    driver: local

networks:
  mini_lakehouse:
    driver: bridge
  
